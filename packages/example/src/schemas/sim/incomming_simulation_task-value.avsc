{
	"type" : "record",
	"name" : "SimulationTask",
	"namespace" : "nl.ras.netn_etr",
	"doc" : "Version 30 april 2020; Schema owner https://ci.tno.nl/gitlab/battlelab/simulation-rest-service/-/tree/master/packages/simulation-service/schemas/netn-etr",
	"fields" : 
	[
		{
			"name": "Description",
			"type": "string",
			"doc": "Summary of task"
		},
		{
			"name" : "TaskType",
			"type" : 
			{
				"type" : "enum",
				"name" : "SimTaskTypeEnum",
				"doc" : "",
				"symbols" : [ "MoveToLocation", "FireAtLocation", "Mount", "Dismount" ]
			}
		},
		{
			"name": "SimTask",
			"type": 
			{
				"type": "record",
				"name": "SimTaskType",
				"namespace": "nl.ras.netn_etr",
				"fields" : 
				[
					{
						"name" : "TaskHeader",
						"type" : 
						{
							"type" : "record",
							"name" : "TaskHeaderType",
							"namespace" : "nl.ras.netn_etr",
							"doc" : "All tasks have this header",
							"fields" : 
							[ 
								{
									"name" : "TaskId",
									"type" : "string",
									"doc" : "Identifies the task (TaskCounter/FederateHandle) TaskCounter shall be incremented by 1 for each sent task; FederateHandle handle that the federate get when joining the federation " 
								}, 
								{
									"name" : "Taskee",
									"type" : "string",
									"doc" : "Must be GUID Format! The unit that has to execute the task. Datatype is 16 byte UUID"
								}, 
								{
									"name" : "Tasker",
									"type" : "string",
									"doc" : "Callsign",
									"default": ""
								}, 
								{
									"name" : "StartWhen",
									"type" : "int",
									"logicalType": "date",
									"doc" : "Time when the task execution has to start (unix epoch, 1 January 1970 (ISO calendar))."
								}, 
								{
									"name" : "EndWhen",
									"type" : "int",
									"logicalType": "date",
									"doc" : "Time when the task execution has to end. 0 means no end time."
								}, 
								{
									"name" : "Why",
									"type" : "string",
									"doc" : "For what reason has this task to be executed."
								}, 
								{
									"name" : "TaskType",
									"type" : 
									{
										"type" : "enum",
										"name" : "TaskTypeEnum",
										"doc" : "CancelAllOtherTasks: this new task replaces all other tasks. The current task has to be aborted as soon as possible and the new task can be executed at the start time. \nAddToTaskList: this new task will be executed after all other tasks with a smaller start time have been completed. \nInterruptCurrentTask: this new task interrupts the current task or is an adjustment of the current task.",
										"symbols" : [ "CancelAllOtherTasks", "AddToTaskList", "InterruptCurrentTask" ]
									} 
									,
									"doc" : "Determines how this new task is related to the current task."
								}
							]
						}
					},
					{
						"name" : "FireAtLocation",
						"default": null,
						"type" :
						[
							"null",
							{
								"type" : "record",
								"name" : "FireAtLocationType",
								"namespace" : "nl.ras.netn_etr",
								"doc" : "Tasks a unit to fire at a location.",
								"fields" : 
								[
									{
										"name" : "TargetLocation",
										"type" : 
										{
											"type" : "record",
											"name" : "LocationType",
											"namespace" : "nl.ras.netn_etr",
											"fields" : 
											[ 
												{
													"name" : "latitude",
													"type" : "double",
													"doc" : "Latitude in degrees (-90, 90] - 0 is equator"
												},
												{
													"name" : "longitude",
													"type" : "double",
													"doc" : "Longitude in degrees (-180, 180] - 0 is line [geographic north - Greenwich - geographic south]"
													}, 
												{
													"name" : "altitude",
													"type" : [ "null", "double" ],
													"doc" : "Altitude in meters - 0 is surface of WGS84-based ellipsoid"
												}
											]
										},
										"doc" : "The location to fire at."
									}, 
									{
										"name" : "Duration",
										"type" : "int",
										"doc" : "The duration of the fire (seconds)."
									},
									{
										"name" : "BombType",
										"type" : "string",
										"doc" : "Non NETN field, name of missile"
									}
								]
							}
						]
					},
					{
						"name" : "MoveToLocation",
						"default": null,
						"type" : 
						[ 
							"null", 
							{
								"type" : "record",
								"name" : "MoveToLocationType",
								"namespace" : "nl.ras.netn_etr",
								"doc" : "Tasks a unit to move to the specified destination.",
								"fields" : 
								[
									{
										"name" : "MoveType",
										"type" : 
										{
											"type" : "enum",
											"name" : "MoveTypeEnum",
											"doc" : "CrossCountry: move directly to the destination without taking into account the roads. OnlyRoads: stay on the roads to get to the closest point to the destination that is still on a road; if there is no road very near to the start (within around 10 meters) there will be no movement at all. RoadsAndCrossCountry: move to the destination by taking into account the roads; it is allowed to go off the road.",
											"symbols" : [ "CrossCountry", "OnlyRoads", "RoadsAndCrossCountry" ]
										}
									}, 
									{
										"name" : "Waypoints",
										"type" : 
										{
											"type" : "array",
											"items" : "LocationType"
										},
										"doc" : "Optional route to the destination."
									}, 
									{
										"name" : "Destination",
										"type" : "LocationType",
										"doc" : "Tasks an entity to move to the specified location."
									} 
								]
							}
						]
					}, 
					{
						"name" : "Mount",
						"default": null,
						"type" : 
						[ 
							"null", 
							{
								"type" : "record",
								"name" : "MountType",
								"namespace" : "nl.ras.netn_etr",
								"doc" : "Task the entity to mount in the specified entity. The taskee entiity should be within a certain distance tolerance of the entiity to mount into. this tolerance must be specified in the federation agreements. Mount includes: embark (vessel), board (plane), and so on.",
								"fields" : 
								[ 
									{
										"name" : "VehicleToMount",
										"type" : "string",
										"doc" : "The vehicle to mount. (UUID 16 bytes)"
									} 
								]
							}
						]
					}, 
					{
						"name" : "Dismount",
						"default": null,
						"type" : 
						[ 
							"null", 
							{
								"type" : "record",
								"name" : "DismountType",
								"namespace" : "nl.ras.netn_etr",
								"doc" : "Task the entity to dismount from the entity where it is in.",
								"fields" : 
								[ 
								]
							}
						]
					}
				]
			}
		}
	]
} 
